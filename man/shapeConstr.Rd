% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/shapeConstr.R, R/shapeConstr.bs.R,
%   R/shapeConstr.default.R, R/shapeConstr.ns.R, R/shapeConstr.onebasis.R,
%   R/shapeConstr.ps.R
\name{shapeConstr}
\alias{shapeConstr}
\alias{shapeConstr.bs}
\alias{shapeConstr.default}
\alias{shapeConstr.ns}
\alias{shapeConstr.onebasis}
\alias{shapeConstr.ps}
\title{Create shape constraints}
\usage{
shapeConstr(x, shape, ...)

\method{shapeConstr}{bs}(x, shape, ...)

\method{shapeConstr}{default}(x, shape, intercept = FALSE, ...)

\method{shapeConstr}{ns}(x, shape, ...)

\method{shapeConstr}{onebasis}(x, shape, ...)

\method{shapeConstr}{ps}(x, shape, ...)
}
\arguments{
\item{x}{An object representing a design matrix of predictor variables, typically basis functions. See details for supported objects.}

\item{shape}{A character vector indicating one or several shape-constraints. See details for supported shapes.}

\item{...}{Additional parameters passed to or from other methods.}

\item{intercept}{For some methods, a logical value indicating if the design matrix includes an intercept. In most cases will be automatically extracted from \code{x}.}
}
\value{
A constraint matrix to be passed to \code{Cmat} in \link[=cirls.fit]{cirls.fit}.
}
\description{
Creates a constraint matrix to shape-constrain a set of coefficients. Mainly intended for splines but can constrain various bases or set of variables. Will typically be called from within \link[=cirls.fit]{cirls.fit} but can be used to generate constraint matrices.
}
\details{
The recommended usage is to directly specify the shape constraint through the \code{shape} argument in the call to \link[stats:glm]{glm} with \link[=cirls.fit]{cirls.fit}. This method is then called internally to create the constraint matrix. However, \code{shapeConstr} can nonetheless be called directly to manually build or inspect the constraint matrix for a given shape and design matrix.

The \code{shape} argument allows to define a specific shape for the association between the expanded term in \code{x} and the response of the regression model. This shape can describe the relation between coefficients for the default method, or the shape of the smooth term for spline bases. At the moment, six different shapes are supported by the \code{shape} argument:
\describe{
\item{\code{"pos"}}{Positive.}
\item{\code{"neg"}}{Negative.}
\item{\code{"inc"}}{Monotonically increasing.}
\item{\code{"dec"}}{Monotonically decreasing.}
\item{\code{"cvx"}}{Convex.}
\item{\code{"ccv"}}{Concave.}
}

When consistent, several shapes can be provided simultaneously to obtain, e.g., a monotone increasing and convex association.

\code{shapeConstr} currently supports several objects, creating an appropriate shape-constraint matrix depending on the object:
\describe{
\item{\code{default}}{The default method takes any design matrix and creates a constraint matrix for the shape on the coefficients. For instance, \code{shape = "inc"} will ensure that the coefficients associated with each variable in \code{x} is greater or equal than the coeffients of the previous columns. The default method includes an additional argument \code{intercept} (see below).}
\item{\code{bs}}{B-spline bases as generated from the \link[splines:bs]{bs} function from the \code{splines} package. Works for any spline order and knot specification.}
\item{\code{ns}}{Natural splines as generated from the \link[splines:ns]{ns} function from the \code{splines} package. Similar to \link[splines:bs]{bs} but accounting for the linearity constraints at the boundaries.}
\item{\code{ps}}{Penalised splines (P-Splines) as generated by the \link[dlnm:ps]{ps} function from the \code{dlnm} package.}
\item{\code{onebasis}}{General method for basis functions generated by \link[dlnm:onebasis]{onebasis} from the \code{dlnm} package. Will typically call the appropriate method depending on the \code{fun} argument.}
}

The parameters necessary to build the constraint matrix (e.g. \code{knots} and \code{ord} for splines) are typically extracted from the \code{x} object. This is also true for the \code{intercept} for most of the object, except for the default method for which it can be useful to explicitly provide it. In a typical usage in which \code{shapeConstr} would only be called within \link[=cirls.fit]{cirls.fit}, \code{intercept} is automatically determined from the \link[stats:glm]{glm} formula.
}
\examples{
# example code


}
\references{
Zhou, S. & Wolfe, D. A., 2000, On derivative estimation in spline regression. \emph{Statistica Sinica} \strong{10}, \strong{93â€“108}.
}
\seealso{
\code{\link[=cirls.fit]{cirls.fit()}} which typically calls \code{shapeConstr} internally.
}
